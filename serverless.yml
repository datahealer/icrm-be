service: icrm
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  timeout: 600
  profile: default
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  environment:
   MONGODB_URL: ${env:MONGODB_URL}
   RESEND_API: ${env:RESEND_API}
   JWT_SECRET: ${env:JWT_SECRET}
   OPENSSL_CONF: ${env:OPENSSL_CONF}
   SIGNUP_API_KEY: ${env:SIGNUP_API_KEY}
   AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
   AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
   AWS_BUCKET: ${env:AWS_BUCKET}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - apigateway:*
        - lambda:*
        - execute-api:Invoke
      Resource: "*"

functions:
  app:
    handler: server.handler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors:
            origin: 'https://main.d2q0ys24czjejd.amplifyapp.com'
            headers:
              - Content-Type
              - Authorization
              - Access-Control-Allow-Origin
              - X-Requested-With
              - Accept
              - Origin
            allowCredentials: true         
  checkOvertimeAllocations:
    handler: controllers/ResourceController.updateOvertimeAllocationStatus
    events:
      - schedule:
          rate: cron(30 18 * * ? *)
          enabled: true
  insertAsset:
    handler: script.insertAsset
    events:
      - http:
          path: /insert-asset
          method: post
  createPeople:
    handler: controllers/peopleController.createAdmin
    events:
      - http: 
          path: /create-people
          method: post
          private: true
    timeout: 600



plugins:
  - serverless-offline

package:
  excludeDevDependencies: true
  exclude:
    - .gitignore
    - .env
    - .git/**

custom:
  serverless-offline:
    httpPort: 3000
    host: localhost



